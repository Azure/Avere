name: Terraform Plan

on:
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_dispatch:
    inputs:
      solutionModule:
        description: 'Solution Module'
        type: choice
        options:
        - 1.security
        - 2.network
        - 3.storage
        - 4.storage.cache
        - 5.compute.image
        - 6.compute.scheduler
        - 7.compute.farm
        - 8.compute.workstation
        required: true
      logLevel:
        description: 'Log Level'
        type: choice
        options:
        - Error
        - Warn
        - Info
        - Debug
        - Trace
        required: true
      destroyMode:
        description: 'Destroy Mode'
        type: boolean
        required: false
        
env:
  ARM_TENANT_ID: ${{secrets.ARM_TENANT_ID}}
  ARM_SUBSCRIPTION_ID: ${{secrets.ARM_SUBSCRIPTION_ID}}
  ARM_CLIENT_ID: ${{secrets.ARM_CLIENT_ID}}
  ARM_CLIENT_SECRET: ${{secrets.ARM_CLIENT_SECRET}}
  TF_LOG: ${{github.event.inputs.logLevel}}
  
permissions:
  contents: write
  pull-requests: write
  
jobs:
  terraformPlan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{github.head_ref}}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          
      - if: github.event_name == 'pull_request'
        run: |
          echo ${{secrets.GITHUB_TOKEN}} | gh auth login --with-token
          solutionModule=$(gh pr view ${{github.event.pull_request.number}} --json files)
          solutionModule=$(echo $solutionModule | jq -r .files[].path)
          readarray -d / -t solutionModule <<< $solutionModule
          echo "solutionModule=$solutionModule" >> $GITHUB_ENV
          
      - if: github.event_name != 'pull_request'
        run: |
          solutionModule=${{github.event.inputs.solutionModule}}
          echo "solutionModule=$solutionModule" >> $GITHUB_ENV
        
      - if: startsWith(env.solutionModule, 4)
        run: |
          latestVersion=$(curl -s https://api.github.com/repos/Azure/Avere/releases/latest | jq -r .tag_name)
          downloadUrl=https://github.com/Azure/Avere/releases/download/$latestVersion/terraform-provider-avere
          localDirectory=~/.terraform.d/plugins/registry.terraform.io/hashicorp/avere/${latestVersion:1}/linux_amd64
          mkdir -p $localDirectory
          curl -o $localDirectory/terraform-provider-avere_$latestVersion -L $downloadUrl
          chmod 755 $localDirectory/terraform-provider-avere_$latestVersion
          
      - if: startsWith(env.solutionModule, 1)
        run: terraform -chdir=$(pwd)/${{env.solutionModule}} init -upgrade
      
      - if: "!startsWith(env.solutionModule, 1)"
        run: terraform -chdir=$(pwd)/${{env.solutionModule}} init -upgrade -backend-config ../0.global/backend.config
        
      - id: plan
        if: github.event.inputs.destroyMode != 'true'
        run: |
          tfPlan=$(pwd)/.github/terraform.plan
          terraform -chdir=$(pwd)/${{env.solutionModule}} plan -no-color -out $tfPlan
          git config user.name "$(git log -n 1 --pretty=format:%an)"
          git config user.email "$(git log -n 1 --pretty=format:%ae)"
          git add $tfPlan
          git commit -m 'Terraform Plan'
          git push
          
      - if: github.event.inputs.destroyMode == 'true'
        run: terraform -chdir=$(pwd)/${{env.solutionModule}} plan -destroy
        
      - if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${{steps.plan.outputs.stdout}}`
            })
