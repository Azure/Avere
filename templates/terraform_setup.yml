# Copyright (C) Microsoft Corporation. All rights reserved.
# https://aka.ms/yaml
parameters:
- name: original_node_count
  type: string
- name: tf_config
  type: string
- name: image
  type: string
  default: "microsoft-avere:vfxt:avere-vfxt-node:latest"
  values:
    - "microsoft-avere:vfxt:avere-vfxt-node:latest"
    - "microsoft-avere:vfxt:avere-vfxt-node:9.1.0"
    - "microsoft-avere:vfxt:avere-vfxt-node:8.0.1"
    - "microsoft-avere:vfxt:avere-vfxt-node:6.3.0"
    - "microsoft-avere:vfxt-preview:avere-vfxt-node:latest"
- name: controller_image
  type: string
- name: scale_up_node_count
  type: string
- name: vm_count
  type: string
- name: vdbench_config
  type: string
  default: "ondisk"
  values:
    - "ondisk"
    - "inmem"

steps:
- script: |
    export PATH=$PATH:${BUILD_SOURCESDIRECTORY}/test/utils

    az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID &&
    az account set -s $ARM_SUBSCRIPTION_ID
    check_rc.sh $? "Login to Azure and set default subscription" || exit 0
    echo "##[group]Create runner resource group in ${REGION}"
    az group create --location ${REGION} --name ${RESOURCE_GROUP_NAME}
    check_rc.sh $? "Create resource group (${RESOURCE_GROUP_NAME}) in ${REGION}" || exit 0
    echo "##[endgroup]"
    echo "##[group]Create network resources in ${RESOURCE_GROUP_NAME}"
    az network nsg create \
      --resource-group ${RESOURCE_GROUP_NAME} \
      --location       ${REGION} \
      --name           ${NSG}
    check_rc.sh $? "Create network security group (${NSG})" || exit 0

    az network vnet create \
      --resource-group         ${RESOURCE_GROUP_NAME} \
      --location               ${REGION} \
      --name                   ${VNET} \
      --address-prefixes       ${VNET_ADDR_PREFIX} \
      --subnet-name            ${SUBNET} \
      --network-security-group ${NSG}
    check_rc.sh $? "Create vnet (${VNET}) in ${RESOURCE_GROUP_NAME}" || exit 0

    az network vnet subnet update \
      --resource-group         ${RESOURCE_GROUP_NAME} \
      --vnet-name              ${VNET} \
      --name                   ${SUBNET} \
      --service-endpoints      Microsoft.Storage
    check_rc.sh $? "Add Microsoft.Storage to subnet ${SUBNET} in ${VNET}" || exit 0

    echo "##[endgroup]"
    # Prepare the cloud-init file.
    cloud_init_file=${BUILD_SOURCESDIRECTORY}/templates/cloud_init/cloud_init.client.yml

    base64_idrsa=$(base64 -w 0 ~/.ssh/id_rsa)
    echo "##vso[task.setvariable variable=secret.SSH_ID_RSA_BASE64;issecret=true]${base64_idrsa}"
    ssk_key_pub=$(cat ~/.ssh/id_rsa.pub)
    echo "##vso[task.setvariable variable=secret.SSH_KEY_PUBLIC;issecret=true]${ssk_key_pub}"

    new_node_count=$(( ${{ parameters.original_node_count }} + ${{ parameters.scale_up_node_count }} ))
    vdbench_sed_url=${VDBENCH_URL}

    sed -i -e "s/<id_rsa>/$base64_idrsa/" \
      -e "s/<region>/$REGION/" \
      -e "s/<avere_admin_pw>/$AVERE_ADMIN_PW/" \
      -e "s/<sub_id>/$ARM_SUBSCRIPTION_ID/" \
      -e "s/<arm_client_id>/$ARM_CLIENT_ID/" \
      -e "s:<arm_client_scrt>:$ARM_CLIENT_SECRET:" \
      -e "s/<arm_tenant_id>/$ARM_TENANT_ID/" \
      -e "s/<resource_group_name>/$RESOURCE_GROUP_NAME/" \
      -e "s/<vnet_name>/$VNET/" \
      -e "s/<terraform_file_config>/$TF_VFXT_CONFIG/" \
      -e "s,<ssh_key>,$(cat ~/.ssh/id_rsa.pub)," \
      -e "s/<vm_admin_user>/azureuser/" \
      -e "s/<vfxt_image>/${{ parameters.image }}/" \
      -e "s/<original_node_count>/${{ parameters.original_node_count }}/" \
      -e "s/<new_node_count>/$new_node_count/" \
      -e "s/<vm_count>/${{ parameters.vm_count }}/" \
      -e "s,<build_sourcebranch>,${BUILD_SOURCEBRANCH}," \
      -e "s/<vdbench_config>/${{ parameters.vdbench_config }}/" \
      -e "s,<vdbench_download_url>,${vdbench_sed_url//&/\\&}," \
      -e "s,<gsi_url>,$GSI_URL," \
      ${cloud_init_file}
    check_rc.sh $? "Preparing cloud-init file (sed)" || exit

    # Deploy the client VMs.
    az vm create -g ${RESOURCE_GROUP_NAME} \
      -n ${VM_NAME}  \
      --admin-username azureuser \
      --vnet-name ${VNET} \
      --subnet ${SUBNET} \
      --image 'Canonical:0001-com-ubuntu-server-focal:20_04-lts:latest' \
      --public-ip-address "" \
      --size Standard_DS2_v2 \
      --nsg "" \
      --custom-data ${BUILD_SOURCESDIRECTORY}/templates/cloud_init/cloud_init.client.yml

    check_rc.sh $? "VM Create" || exit

    for i in {1..3}; do
      sleep 60
      cmdlog=/tmp/vm_runcmd.log
      az vm run-command invoke                  \
        --resource-group ${RESOURCE_GROUP_NAME} \
        --name ${VM_NAME}                      \
        --command-id RunShellScript             \
        --scripts "cloud-init status --wait"    \
        --query 'value[0].message' --output tsv | tee ${cmdlog}

      run_rc=${PIPESTATUS[0]}
      if [ "${run_rc}" -ne 0 ]; then
        echo "##vso[task.logissue type=error;]Running cloud init wait Attempt $i of 3."
      else
        break
      fi
    done
    grep -q 'status: done' ${cmdlog}
    check_rc.sh $? "Wait for cloud-init completion. Create vfxt"

    # Cooldown for "az vm run-command invoke" before the next one.
    # This solves a corner/race case when the command is run back-to-back.
    sleep 60

    az vm run-command invoke                          \
      --command-id     RunShellScript                 \
      --name           ${VM_NAME}                     \
      --resource-group ${RESOURCE_GROUP_NAME}         \
      --scripts "tail -100 /var/log/cloud-init-output.log" \
      --query 'value[0].message' --output tsv | tee /tmp/cloud-init_output.log
    check_rc.sh ${PIPESTATUS[0]} "tail cloud-init-output.log" || exit 0
    grep -q 'DONE: Cloud-Init COMPLETE' /tmp/cloud-init_output.log
    check_rc.sh $? "Cloud-init status check" || exit

    # Cooldown for "az vm run-command invoke" before the next one.
    # This solves a corner/race case when the command is run back-to-back.
    sleep 60

  displayName: 'Terraform: setup ${{ parameters.tf_config }}'
  env:
    AVERE_ADMIN_PW: $(AVERE-ADMIN-PW)
    ARM_CLIENT_ID: $(AZURE-CLIENT-ID)
    ARM_CLIENT_SECRET: $(AZURE-CLIENT-SECRET)
    ARM_TENANT_ID: $(AZURE-TENANT-ID)
    ARM_SUBSCRIPTION_ID: $(AZURE-SUBSCRIPTION-ID)
    GSI_URL: $(GSI-URL)
    VDBENCH_URL: $(VDBENCH-URL)
